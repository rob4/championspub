'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Soccerama = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Soccerama = exports.Soccerama = function () {
  function Soccerama(tokenId, vId) {
    _classCallCheck(this, Soccerama);

    this.token = null;
    this.version = 'v1.2';
    this.baseUrl = "https://api.soccerama.pro/";

    this.token = tokenId;
    if (vId) this.version = vId;
    if (vId == 'v2.0') this.baseUrl = "https://soccer.sportmonks.com/api/";
    this.baseUrl = this.baseUrl + this.version + "/";
  }

  _createClass(Soccerama, [{
    key: '_get',
    value: function _get(url, plain) {
      return new Promise(function (resolve, reject) {
        var request = _https2.default.get(url, function (response) {
          // handle http errors
          if (response.statusCode < 200 || response.statusCode > 299) {
            reject(new Error('Failed to load page, status code: ' + response.statusCode));
          }
          // temporary data holder
          var body = [];
          // on every content chunk, push it to the data array
          response.on('data', function (chunk) {
            return body.push(chunk);
          });
          // we are done, resolve promise with those joined chunks
          response.on('end', function () {
            return resolve(plain ? body.join('') : JSON.parse(body.join('')));
          });
        });
        // handle connection errors of the request
        request.on('error', function (err) {
          return reject(err);
        });
      });
    }
  }, {
    key: 'get',
    value: function get(endpoint, params) {
      var url = this.composeUrl(endpoint, params);
      return this._get(url);
    }
  }, {
    key: 'composeUrl',
    value: function composeUrl(endpoint, params) {
      var newEndpoint = this.baseUrl + endpoint;
      var wrapped = endpoint.match(/\{(.*?)\}/g);
      if (wrapped) {
        var unwrapped = function unwrapped(wrapped) {
          return wrapped.replace('{', '').replace('}', '');
        };
        for (var w in wrapped) {
          var k = unwrapped(wrapped[w]);
          newEndpoint = newEndpoint.replace(wrapped[w], params[k]);
          delete params[k];
        }
      }
      newEndpoint += "?api_token=" + this.token;

      if (params && Object.keys(params).length > 0) {
        var plist = [];
        var pkeys = Object.keys(params);
        for (var p in pkeys) {
          if (params[pkeys[p]]) plist.push(pkeys[p]);
        }
        if (plist.length > 0) newEndpoint += "&include=" + plist.join(',');
      }
      return newEndpoint;
    }
  }]);

  return Soccerama;
}();